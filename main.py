from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from datetime import datetime
import os
import logging
import pytz
import json
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ –∑ environment variables
TOKEN = os.getenv('BOT_TOKEN')

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES_FILE = 'messages_history.json'

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
last_status_per_chat = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω
working_hours = {
    'start_hour': 8,
    'end_hour': 23
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def save_message(user_name, user_id, chat_id, chat_type, message_text, timestamp, status):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó"""
    try:
        # –ß–∏—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if Path(MESSAGES_FILE).exists():
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                messages = json.load(f)
        else:
            messages = []
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º ID
        message_id = len(messages) + 1
        message_data = {
            'id': message_id,
            'user_name': user_name,
            'user_id': user_id,
            'chat_id': chat_id,
            'chat_type': chat_type,
            'message_text': message_text,
            'timestamp': timestamp,
            'status': status,  # 'received', 'replied', 'rejected_time', 'manually_replied'
            'replied_by': None,  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –≤—ñ–¥–∑–Ω–∞—á–∏–≤ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ
            'reply_timestamp': None
        }
        messages.append(message_data)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–∞–¥ —É —Ñ–∞–π–ª (—Ç—Ä–∏–º–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 1000 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
        if len(messages) > 1000:
            messages = messages[-1000:]
            
        with open(MESSAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def get_recent_messages(limit=10):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if Path(MESSAGES_FILE).exists():
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                messages = json.load(f)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –±–µ–∑ ID
                updated = False
                for i, msg in enumerate(messages):
                    if 'id' not in msg:
                        msg['id'] = i + 1
                        msg['replied_by'] = None
                        msg['reply_timestamp'] = None
                        updated = True
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                if updated:
                    with open(MESSAGES_FILE, 'w', encoding='utf-8') as f_write:
                        json.dump(messages, f_write, ensure_ascii=False, indent=2)
                
                return messages[-limit:] if messages else []
        return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
def is_allowed_time():
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º (Europe/Kiev)
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    return working_hours['start_hour'] <= current_hour < working_hours['end_hour']

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É —É –ö–∏—î–≤—ñ
def get_kyiv_time_string():
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time_kyiv = datetime.now(kyiv_tz)
    return current_time_kyiv.strftime("%H:%M")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —á–∞—Ç—É
async def set_chat_permissions(context, chat_id, can_send_messages=True):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è —á–∞—Ç—É"""
    try:
        from telegram import ChatPermissions
        permissions = ChatPermissions(
            can_send_messages=can_send_messages,
            can_send_audios=can_send_messages,
            can_send_documents=can_send_messages,
            can_send_photos=can_send_messages,
            can_send_videos=can_send_messages,
            can_send_video_notes=can_send_messages,
            can_send_voice_notes=can_send_messages,
            can_send_polls=can_send_messages,
            can_send_other_messages=can_send_messages,
            can_add_web_page_previews=can_send_messages
        )
        await context.bot.set_chat_permissions(chat_id=chat_id, permissions=permissions)
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –¥–æ–∑–≤–æ–ª—ñ–≤ —á–∞—Ç—É {chat_id}: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —á–∞—Å—É
async def send_time_status_message(context, chat_id, is_allowed):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É"""
    global last_status_per_chat
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
    current_status = 'allowed' if is_allowed else 'blocked'
    last_status = last_status_per_chat.get(chat_id, None)
    
    # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if last_status == current_status:
        return
    
    try:
        current_time = get_kyiv_time_string()
        if is_allowed:
            message = f"üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! \n\n–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ.\n\n–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏: {working_hours['start_hour']:02d}:00 - {working_hours['end_hour']:02d}:00\n–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time}"
        else:
            message = f"üåô –†–æ–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è {working_hours['end_hour']:02d}:00 –Ω–µ–º–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏.\n–ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å –ø—ñ—Å–ª—è {working_hours['start_hour']:02d}:00 —Ä–∞–Ω–∫—É.\n\n–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time}"
        
        await context.bot.send_message(chat_id=chat_id, text=message)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
        last_status_per_chat[chat_id] = current_status
        
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –¥–æ —á–∞—Ç—É {chat_id}: {current_status}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —á–∞—Å –¥–æ —á–∞—Ç—É {chat_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–∞—Ç—ñ–≤ —Ç–∞ –∫–æ–º–∞–Ω–¥)
async def message_handler(update: Update, context):
    current_time_str = get_kyiv_time_string()
    user_name = update.message.from_user.first_name or "–¥—Ä—É–∂–µ"
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    chat_type = update.message.chat.type
    message_text = update.message.text
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name} (ID: {user_id}) –≤ —á–∞—Ç—ñ {chat_id} ({chat_type}): {message_text}")
    
    # –í –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–∞—Ç–∞—Ö –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
    if chat_type == 'private':
        if not is_allowed_time():
            response = f"–ó–∞—Ä–∞–∑ –Ω–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å. –ú–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –∑ {working_hours['start_hour']:02d}:00 –¥–æ {working_hours['end_hour']:02d}:00.\n\n–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time_str}"
            await update.message.reply_text(response)
            save_message(user_name, user_id, chat_id, chat_type, message_text, current_time_str, 'rejected_time')
        else:
            response_message = f"–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, {user_name}! üôè\n\n–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time_str}"
            await update.message.reply_text(response_message)
            save_message(user_name, user_id, chat_id, chat_type, message_text, current_time_str, 'replied')
    else:
        # –í –≥—Ä—É–ø–∞—Ö –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if is_allowed_time():
            save_message(user_name, user_id, chat_id, chat_type, message_text, current_time_str, 'received')
        else:
            # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –¥—ñ–π—Ç–∏, –∞–ª–µ —è–∫—â–æ –¥—ñ–π—à–ª–æ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            save_message(user_name, user_id, chat_id, chat_type, message_text, current_time_str, 'blocked_time')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É –±–æ—Ç–∞
async def start(update: Update, context):
    current_time_str = get_kyiv_time_string()
    user_name = update.message.from_user.first_name or "–¥—Ä—É–∂–µ"
    chat_type = "–≥—Ä—É–ø—ñ" if update.message.chat.type in ['group', 'supergroup'] else "–æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ"
    
    start_message = f"""–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã

–Ø –±–æ—Ç, —è–∫–∏–π –ø—Ä–∞—Ü—é—î –∑ {working_hours['start_hour']:02d}:00 –¥–æ {working_hours['end_hour']:02d}:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.

–Ø –¥—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é!

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/history –∞–±–æ /messages - —ñ—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—Ä–∏–≤–∞—Ç–Ω–æ –∞–¥–º—ñ–Ω–∞–º)
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—Ä–∏–≤–∞—Ç–Ω–æ –∞–¥–º—ñ–Ω–∞–º)
/replied [ID] - –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)
/update_permissions - –æ–Ω–æ–≤–∏—Ç–∏ –¥–æ–∑–≤–æ–ª–∏ –≥—Ä—É–ø–∏ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)
/clear_history - –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é (—Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫)

**–ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏:**
/set_hours [–ø–æ—á–∞—Ç–æ–∫] [–∫—ñ–Ω–µ—Ü—å] - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /set_hours 9 22)
/show_hours - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏

–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time_str}
–†–æ–±–æ—Ç–∞ –≤ {chat_type}"""
    
    await update.message.reply_text(start_message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(update: Update, context):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø—ñ"""
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    
    # –í –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ
    if update.message.chat.type == 'private':
        return True
    
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in ['creator', 'administrator']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async def history_command(update: Update, context):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏.")
            return
        recent_messages = get_recent_messages(10)
        
        if not recent_messages:
            await update.message.reply_text("üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        history_text = "üìã **–û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n\n"
        
        for i, msg in enumerate(recent_messages, 1):
            status_emoji = {
                'replied': '‚úÖ',
                'manually_replied': 'üí¨',
                'rejected_time': '‚è∞',
                'blocked_time': 'üö´',
                'received': 'üì®'
            }.get(msg['status'], '‚ùì')
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            reply_info = ""
            if msg['status'] == 'manually_replied' and msg.get('replied_by'):
                reply_info = f" (–≤—ñ–¥–ø–æ–≤—ñ–≤ –∞–¥–º—ñ–Ω, {msg.get('reply_timestamp', '–Ω–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å')})"
            
            # –ë–µ–∑–ø–µ—á–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è Markdown
            safe_user_name = msg['user_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
            safe_message_text = msg['message_text'][:50].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
            if len(msg['message_text']) > 50:
                safe_message_text += "..."
            
            history_text += f"{i}. {status_emoji} *{safe_user_name}* ({msg['timestamp']}) [ID: {msg.get('id', 'N/A')}]\n"
            history_text += f"   üí¨ {safe_message_text}\n"
            history_text += f"   üìç {msg['chat_type']} | –°—Ç–∞—Ç—É—Å: {msg['status']}{reply_info}\n\n"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_id = update.message.from_user.id
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
        if len(history_text) > 4000:
            parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]
            for part in parts:
                await context.bot.send_message(chat_id=user_id, text=part, parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=user_id, text=history_text, parse_mode='Markdown')
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–¥–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
        if update.message.chat.type != 'private':
            await update.message.reply_text("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async def stats_command(update: Update, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏.")
            return
        if not Path(MESSAGES_FILE).exists():
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            return
            
        with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
            all_messages = json.load(f)
        
        if not all_messages:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            return
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(all_messages)
        replied = len([m for m in all_messages if m['status'] == 'replied'])
        rejected = len([m for m in all_messages if m['status'] == 'rejected_time'])
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        unique_users = len(set(m['user_name'] for m in all_messages))
        
        # –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        today_kyiv = get_kyiv_time_string()[:5]  # HH:MM format
        today_messages = [m for m in all_messages if m['timestamp'][:5] == today_kyiv[:5]]
        today_count = len(today_messages)
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å**

üî¢ **–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:** {total}
‚úÖ **–í—ñ–¥–ø–æ–≤—ñ–ª–∏:** {replied}
‚è∞ **–í—ñ–¥—Ö–∏–ª–µ–Ω–æ (—á–∞—Å):** {rejected}
üë• **–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {unique_users}
üìÖ **–°—å–æ–≥–æ–¥–Ω—ñ:** {today_count}

‚è∞ **–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ:** {get_kyiv_time_string()}
üïí **–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏:** 8:00 - 23:00"""

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_id = update.message.from_user.id
        await context.bot.send_message(chat_id=user_id, text=stats_text, parse_mode='Markdown')
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–¥–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
        if update.message.chat.type != 'private':
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞)
async def clear_history_command(update: Update, context):
    """–û—á–∏—â—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –≥—Ä—É–ø–∏)"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat.id
        
        # –í –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ
        if update.message.chat.type == 'private':
            is_owner = True
        else:
            try:
                member = await context.bot.get_chat_member(chat_id, user_id)
                is_owner = member.status == 'creator'
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –≤–ª–∞—Å–Ω–∏–∫–∞: {e}")
                is_owner = False
        
        if not is_owner:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É –≥—Ä—É–ø–∏.")
            return
        
        # –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        if Path(MESSAGES_FILE).exists():
            with open(MESSAGES_FILE, 'w', encoding='utf-8') as f:
                json.dump([], f)
            await update.message.reply_text("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—á–∏—â–µ–Ω–æ.")
            logger.info(f"–Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º {update.message.from_user.first_name} (ID: {user_id})")
        else:
            await update.message.reply_text("üìù –Ü—Å—Ç–æ—Ä—ñ—è —ñ —Ç–∞–∫ –ø–æ—Ä–æ–∂–Ω—è.")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ
async def mark_replied_command(update: Update, context):
    """–í—ñ–¥–∑–Ω–∞—á–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
        if not context.args:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /replied 5")
            return
        
        try:
            message_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –ü—Ä–∏–∫–ª–∞–¥: /replied 5")
            return
        
        # –ß–∏—Ç–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if not Path(MESSAGES_FILE).exists():
            await update.message.reply_text("‚ùå –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
            return
            
        with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
            messages = json.load(f)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ ID
        message_found = None
        for msg in messages:
            if msg.get('id') == message_id:
                message_found = msg
                break
        
        if not message_found:
            await update.message.reply_text(f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID {message_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –í—ñ–¥–∑–Ω–∞—á–∞—î–º–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ
        message_found['status'] = 'manually_replied'
        message_found['replied_by'] = update.message.from_user.id
        message_found['reply_timestamp'] = get_kyiv_time_string()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
        with open(MESSAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ
        user_id = update.message.from_user.id
        # –ë–µ–∑–ø–µ—á–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è Markdown
        safe_user_name = message_found['user_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
        safe_message_text = message_found['message_text'][:100].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
        if len(message_found['message_text']) > 100:
            safe_message_text += "..."
        
        confirmation_text = f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {message_id} –≤—ñ–¥ *{safe_user_name}* –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ.\n\nüí¨ –¢–µ–∫—Å—Ç: {safe_message_text}"
        
        await context.bot.send_message(chat_id=user_id, text=confirmation_text, parse_mode='Markdown')
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
        if update.message.chat.type != 'private':
            await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {message_id} –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ.")
        
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {message_id} –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∂–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {update.message.from_user.first_name} (ID: {user_id})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –≥—Ä—É–ø
async def check_and_update_group_permissions(context):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∞—Å —Ç–∞ –æ–Ω–æ–≤–ª—é—î –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø"""
    try:
        is_allowed = is_allowed_time()
        
        # –ß–∏—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if Path(MESSAGES_FILE).exists():
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                messages = json.load(f)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID –≥—Ä—É–ø
            group_chats = set()
            for msg in messages:
                if msg.get('chat_type') in ['group', 'supergroup']:
                    group_chats.add(msg['chat_id'])
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
            for chat_id in group_chats:
                success = await set_chat_permissions(context, chat_id, is_allowed)
                if success:
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
                    await send_time_status_message(context, chat_id, is_allowed)
                    
        logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –≥—Ä—É–ø: {'–¥–æ–∑–≤–æ–ª–µ–Ω–æ' if is_allowed else '–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ –≥—Ä—É–ø: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async def update_permissions_command(update: Update, context):
    """–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ –≥—Ä—É–ø–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏.")
            return
        
        chat_id = update.message.chat.id
        is_allowed = is_allowed_time()
        
        success = await set_chat_permissions(context, chat_id, is_allowed)
        if success:
            await send_time_status_message(context, chat_id, is_allowed)
            await update.message.reply_text("‚úÖ –î–æ–∑–≤–æ–ª–∏ –≥—Ä—É–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ –≥—Ä—É–ø–∏.")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–æ–∑–≤–æ–ª—ñ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async def set_hours_command(update: Update, context):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    global working_hours, last_status_per_chat
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏.")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_hours [–ø–æ—á–∞—Ç–æ–∫] [–∫—ñ–Ω–µ—Ü—å]\n–ü—Ä–∏–∫–ª–∞–¥: /set_hours 9 22")
            return
        
        try:
            start_hour = int(context.args[0])
            end_hour = int(context.args[1])
        except ValueError:
            await update.message.reply_text("‚ùå –ì–æ–¥–∏–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏. –ü—Ä–∏–∫–ª–∞–¥: /set_hours 9 22")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –≥–æ–¥–∏–Ω
        if not (0 <= start_hour <= 23) or not (0 <= end_hour <= 23):
            await update.message.reply_text("‚ùå –ì–æ–¥–∏–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 23.")
            return
        
        if start_hour >= end_hour:
            await update.message.reply_text("‚ùå –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–µ–Ω—à–µ —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –≥–æ–¥–∏–Ω–∏
        old_start = working_hours['start_hour']
        old_end = working_hours['end_hour']
        working_hours['start_hour'] = start_hour
        working_hours['end_hour'] = end_hour
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ —á–∞—Ç—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        last_status_per_chat.clear()
        
        success_message = f"""‚úÖ –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!

üìÖ –ë—É–ª–æ: {old_start:02d}:00 - {old_end:02d}:00
üïê –¢–µ–ø–µ—Ä: {start_hour:02d}:00 - {end_hour:02d}:00

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä—É–ø –æ–Ω–æ–≤–ª–µ–Ω–æ."""
        
        await update.message.reply_text(success_message)
        logger.info(f"–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –∑–º—ñ–Ω–µ–Ω–æ: {start_hour}:00-{end_hour}:00 (–∞–¥–º—ñ–Ω: {update.message.from_user.first_name})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ set_hours: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω
async def show_hours_command(update: Update, context):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏"""
    try:
        current_time = get_kyiv_time_string()
        is_working = is_allowed_time()
        status = "üü¢ –ê–ö–¢–ò–í–ù–û" if is_working else "üî¥ –ù–ï–ê–ö–¢–ò–í–ù–û"
        
        message = f"""üïê **–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –±–æ—Ç–∞**

‚è∞ –ü–æ—á–∞—Ç–æ–∫: {working_hours['start_hour']:02d}:00
‚è∞ –ö—ñ–Ω–µ—Ü—å: {working_hours['end_hour']:02d}:00

üåç –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_time}
üìä –°—Ç–∞—Ç—É—Å: {status}

{'‚úÖ –ó–∞—Ä–∞–∑ –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' if is_working else '‚ùå –ó–∞—Ä–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'}"""
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ show_hours: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–æ–¥–∏–Ω–∏.")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    if not TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables!")
        return
    
    current_kyiv_time = get_kyiv_time_string()
    logger.info("–ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —á–∞—Å—É...")
    logger.info(f"–î–æ–∑–≤–æ–ª–µ–Ω—ñ –≥–æ–¥–∏–Ω–∏: {working_hours['start_hour']:02d}:00 - {working_hours['end_hour']:02d}:00 (–∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º)")
    logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ö–∏—î–≤—ñ: {current_kyiv_time}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('history', history_command))
    application.add_handler(CommandHandler('messages', history_command))  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler('stats', stats_command))
    application.add_handler(CommandHandler('clear_history', clear_history_command))
    application.add_handler(CommandHandler('replied', mark_replied_command))
    application.add_handler(CommandHandler('update_permissions', update_permissions_command))
    application.add_handler(CommandHandler('set_hours', set_hours_command))
    application.add_handler(CommandHandler('show_hours', show_hours_command))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    try:
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(check_and_update_group_permissions, interval=60, first=10)
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞: –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É")
        else:
            logger.warning("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É: –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É")
    application.run_polling()

if __name__ == '__main__':
    main()
